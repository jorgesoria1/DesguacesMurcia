#!/usr/bin/env node

// Script para analizar espec√≠ficamente el problema de datos de veh√≠culos
import fetch from 'node-fetch';

async function analyzeVehicleDataIssue() {
  console.log('üîç AN√ÅLISIS DEL PROBLEMA DE DATOS DE VEH√çCULOS\n');
  
  try {
    const apiKey = process.env.METASYNC_API_KEY;
    if (!apiKey) {
      console.log('‚ùå Error: METASYNC_API_KEY no est√° configurada');
      return;
    }

    console.log('üì° Descargando muestra del API...');
    
    const response = await fetch('https://apis.metasync.com/Almacen/RecuperarCambiosCanal', {
      method: 'GET',
      headers: {
        'apikey': apiKey,
        'fecha': '2024-01-01 00:00:00',
        'lastid': '0',
        'offset': '1000', // Muestra m√°s grande
        'canal': 'desguacesmurcia',
        'idempresa': '1476'
      }
    });

    if (!response.ok) {
      console.log(`‚ùå Error en API: ${response.status} - ${response.statusText}`);
      return;
    }

    const data = await response.json();
    console.log('‚úÖ Datos descargados exitosamente\n');
    
    // Analizar espec√≠ficamente veh√≠culos procesados
    const vehiculosProcesados = data.vehiculos?.filter(v => v.idLocal < 0) || [];
    const vehiculosFisicos = data.vehiculos?.filter(v => v.idLocal > 0) || [];
    
    console.log('üìä AN√ÅLISIS DE VEH√çCULOS EN EL LOTE:');
    console.log(`Total veh√≠culos: ${data.vehiculos?.length || 0}`);
    console.log(`Veh√≠culos f√≠sicos (ID > 0): ${vehiculosFisicos.length}`);
    console.log(`Veh√≠culos procesados (ID < 0): ${vehiculosProcesados.length}\n`);
    
    // Analizar calidad de datos en veh√≠culos procesados
    let procesadosConDatos = 0;
    let procesadosSinDatos = 0;
    
    console.log('üîß AN√ÅLISIS DE CALIDAD DE DATOS EN VEH√çCULOS PROCESADOS:');
    
    vehiculosProcesados.forEach((v, index) => {
      const tieneMarca = v.nombreMarca && v.nombreMarca.trim() !== '';
      const tieneModelo = v.nombreModelo && v.nombreModelo.trim() !== '';
      
      if (tieneMarca && tieneModelo) {
        procesadosConDatos++;
        if (index < 5) { // Mostrar primeros 5 con datos
          console.log(`  ‚úÖ ID ${v.idLocal}: ${v.nombreMarca} ${v.nombreModelo} ${v.nombreVersion || ''}`);
        }
      } else {
        procesadosSinDatos++;
        if (index < 5 && procesadosConDatos === 0) { // Mostrar primeros 5 sin datos
          console.log(`  ‚ùå ID ${v.idLocal}: [${v.nombreMarca || 'Sin marca'}] [${v.nombreModelo || 'Sin modelo'}] [${v.nombreVersion || 'Sin versi√≥n'}]`);
        }
      }
    });
    
    console.log(`\nüìà ESTAD√çSTICAS DE VEH√çCULOS PROCESADOS:`);
    console.log(`Con datos completos: ${procesadosConDatos}/${vehiculosProcesados.length} (${((procesadosConDatos/vehiculosProcesados.length)*100).toFixed(1)}%)`);
    console.log(`Sin datos: ${procesadosSinDatos}/${vehiculosProcesados.length} (${((procesadosSinDatos/vehiculosProcesados.length)*100).toFixed(1)}%)\n`);
    
    // Analizar veh√≠culos f√≠sicos para comparaci√≥n
    let fisicosConDatos = 0;
    let fisicosSinDatos = 0;
    
    vehiculosFisicos.forEach(v => {
      const tieneMarca = v.nombreMarca && v.nombreMarca.trim() !== '';
      const tieneModelo = v.nombreModelo && v.nombreModelo.trim() !== '';
      
      if (tieneMarca && tieneModelo) {
        fisicosConDatos++;
      } else {
        fisicosSinDatos++;
      }
    });
    
    console.log('üöó COMPARACI√ìN CON VEH√çCULOS F√çSICOS:');
    console.log(`F√≠sicos con datos: ${fisicosConDatos}/${vehiculosFisicos.length} (${vehiculosFisicos.length > 0 ? ((fisicosConDatos/vehiculosFisicos.length)*100).toFixed(1) : 0}%)`);
    console.log(`F√≠sicos sin datos: ${fisicosSinDatos}/${vehiculosFisicos.length} (${vehiculosFisicos.length > 0 ? ((fisicosSinDatos/vehiculosFisicos.length)*100).toFixed(1) : 0}%)\n`);
    
    // Analizar piezas procesadas espec√≠ficas
    const piezasProcesadas = data.piezas?.filter(p => p.idVehiculo < 0) || [];
    console.log('üîß AN√ÅLISIS DE CORRELACI√ìN DE PIEZAS PROCESADAS:');
    console.log(`Total piezas procesadas en lote: ${piezasProcesadas.length}\n`);
    
    let correlacionExitosa = 0;
    let correlacionFallida = 0;
    
    piezasProcesadas.slice(0, 10).forEach(pieza => {
      const vehiculoCorrelacionado = vehiculosProcesados.find(v => v.idLocal === pieza.idVehiculo);
      
      if (vehiculoCorrelacionado) {
        const tieneDatos = vehiculoCorrelacionado.nombreMarca && vehiculoCorrelacionado.nombreModelo;
        if (tieneDatos) {
          correlacionExitosa++;
          console.log(`  ‚úÖ Pieza ${pieza.refLocal} ‚Üí Veh√≠culo ${pieza.idVehiculo}: ${vehiculoCorrelacionado.nombreMarca} ${vehiculoCorrelacionado.nombreModelo}`);
        } else {
          correlacionFallida++;
          console.log(`  ‚ùå Pieza ${pieza.refLocal} ‚Üí Veh√≠culo ${pieza.idVehiculo}: [Sin datos de marca/modelo]`);
        }
      } else {
        correlacionFallida++;
        console.log(`  ‚ùå Pieza ${pieza.refLocal} ‚Üí Veh√≠culo ${pieza.idVehiculo}: [No encontrado en array]`);
      }
    });
    
    console.log(`\nüìä RESUMEN DE CORRELACI√ìN (muestra de 10):`);
    console.log(`Correlaci√≥n exitosa: ${correlacionExitosa}/10`);
    console.log(`Correlaci√≥n fallida: ${correlacionFallida}/10`);
    
    // Conclusiones
    console.log('\nüéØ CONCLUSIONES:');
    console.log('1. ¬øEl array de veh√≠culos incluye procesados?', vehiculosProcesados.length > 0 ? '‚úÖ S√ç' : '‚ùå NO');
    console.log('2. ¬øLos veh√≠culos procesados tienen datos completos?', 
      procesadosConDatos > procesadosSinDatos ? '‚úÖ MAYOR√çA S√ç' : 
      procesadosConDatos > 0 ? '‚ö° ALGUNOS S√ç' : '‚ùå NO');
    console.log('3. ¬øLa correlaci√≥n es posible?', vehiculosProcesados.length > 0 ? '‚úÖ S√ç' : '‚ùå NO');
    console.log('4. ¬øNecesitamos pattern matching como fallback?', 
      procesadosSinDatos > 0 ? '‚úÖ S√ç, ESENCIAL' : '‚ùå NO NECESARIO');
    
  } catch (error) {
    console.error('‚ùå Error al analizar:', error.message);
  }
}

analyzeVehicleDataIssue();