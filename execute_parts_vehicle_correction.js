import { db } from './server/db.js';
import { parts, vehicles } from './shared/schema.js';
import { eq, and, isNull, or, ne, sql } from 'drizzle-orm';

console.log('üîß Iniciando correcci√≥n autom√°tica de datos de veh√≠culo...');

async function correctProcessedPartsVehicleData() {
  try {
    console.log('üîç Analizando piezas procesadas sin datos de veh√≠culo...');
    
    // Encontrar piezas procesadas sin datos v√°lidos de veh√≠culo
    const processedPartsWithoutVehicleData = await db
      .select({
        id: parts.id,
        idVehiculo: parts.idVehiculo,
        refLocal: parts.refLocal,
        vehicleMarca: parts.vehicleMarca,
        vehicleModelo: parts.vehicleModelo,
        descripcionFamilia: parts.descripcionFamilia
      })
      .from(parts)
      .where(
        and(
          eq(parts.activo, true),
          sql`${parts.idVehiculo} < 0`, // Piezas procesadas
          or(
            isNull(parts.vehicleMarca),
            eq(parts.vehicleMarca, ''),
            sql`${parts.vehicleMarca} LIKE '%ELECTRICIDAD%'`,
            sql`${parts.vehicleMarca} LIKE '%CARROCER%'`,
            sql`${parts.vehicleMarca} LIKE '%SUSPENSI√ìN%'`,
            sql`${parts.vehicleMarca} LIKE '%FRENOS%'`,
            sql`${parts.vehicleMarca} LIKE '%DIRECCI√ìN%'`,
            sql`${parts.vehicleMarca} LIKE '%TRANSMISI√ìN%'`,
            sql`${parts.vehicleMarca} LIKE '%MOTOR%'`,
            sql`${parts.vehicleMarca} LIKE '%INTERIOR%'`
          )
        )
      )
      .limit(10000); // Procesar en lotes
    
    console.log(`üìä Encontradas ${processedPartsWithoutVehicleData.length} piezas procesadas sin datos v√°lidos de veh√≠culo`);
    
    if (processedPartsWithoutVehicleData.length === 0) {
      console.log('‚úÖ No hay piezas procesadas que requieran correcci√≥n');
      return;
    }
    
    // Cargar todos los veh√≠culos f√≠sicos para buscar coincidencias
    console.log('üìã Cargando veh√≠culos f√≠sicos para correlaci√≥n...');
    const physicalVehicles = await db
      .select({
        id: vehicles.id,
        idLocal: vehicles.idLocal,
        marca: vehicles.marca,
        modelo: vehicles.modelo,
        version: vehicles.version,
        anyo: vehicles.anyo,
        combustible: vehicles.combustible
      })
      .from(vehicles)
      .where(
        and(
          eq(vehicles.activo, true),
          sql`${vehicles.idLocal} > 0` // Solo veh√≠culos f√≠sicos
        )
      );
    
    console.log(`üìã Cargados ${physicalVehicles.length} veh√≠culos f√≠sicos para correlaci√≥n`);
    
    let updatedCount = 0;
    let batchCount = 0;
    
    // Procesar piezas en lotes de 100
    for (let i = 0; i < processedPartsWithoutVehicleData.length; i += 100) {
      const batch = processedPartsWithoutVehicleData.slice(i, i + 100);
      batchCount++;
      
      console.log(`üì¶ Procesando lote ${batchCount}: ${batch.length} piezas`);
      
      for (const part of batch) {
        // Intentar encontrar veh√≠culo correlacionado basado en similitud sem√°ntica
        // Esta es una implementaci√≥n simplificada - en producci√≥n usar√≠amos ML/NLP
        let foundVehicle = null;
        
        // Estrategia 1: Buscar por descripci√≥n de familia que contenga marca/modelo
        if (part.descripcionFamilia) {
          const familiaUpper = part.descripcionFamilia.toUpperCase();
          
          // Buscar marcas conocidas en la descripci√≥n
          for (const vehicle of physicalVehicles) {
            if (vehicle.marca && vehicle.modelo) {
              const marcaUpper = vehicle.marca.toUpperCase();
              const modeloUpper = vehicle.modelo.toUpperCase();
              
              if (familiaUpper.includes(marcaUpper) || familiaUpper.includes(modeloUpper)) {
                foundVehicle = vehicle;
                break;
              }
            }
          }
        }
        
        // Si encontramos correlaci√≥n, actualizar la pieza
        if (foundVehicle) {
          try {
            await db
              .update(parts)
              .set({
                vehicleMarca: foundVehicle.marca,
                vehicleModelo: foundVehicle.modelo,
                vehicleVersion: foundVehicle.version || '',
                vehicleAnyo: foundVehicle.anyo || 0,
                fechaActualizacion: sql`NOW()`
              })
              .where(eq(parts.id, part.id));
            
            updatedCount++;
            
            if (updatedCount % 50 === 0) {
              console.log(`  ‚úÖ ${updatedCount} piezas actualizadas hasta ahora...`);
            }
          } catch (error) {
            console.error(`‚ö†Ô∏è Error actualizando pieza ${part.refLocal}:`, error.message);
          }
        }
      }
    }
    
    console.log(`üìä Proceso completado:`);
    console.log(`  ‚Ä¢ Piezas analizadas: ${processedPartsWithoutVehicleData.length}`);
    console.log(`  ‚Ä¢ Piezas actualizadas: ${updatedCount}`);
    console.log(`  ‚Ä¢ Tasa de √©xito: ${((updatedCount / processedPartsWithoutVehicleData.length) * 100).toFixed(2)}%`);
    
    return updatedCount;
    
  } catch (error) {
    console.error('‚ùå Error en correcci√≥n autom√°tica:', error);
    throw error;
  }
}

// Ejecutar correcci√≥n
correctProcessedPartsVehicleData()
  .then(result => {
    console.log('‚úÖ Correcci√≥n autom√°tica completada exitosamente');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });