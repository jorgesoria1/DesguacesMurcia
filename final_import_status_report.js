#!/usr/bin/env node

/**
 * Reporte final del estado de la importaci√≥n completa y protecci√≥n de piezas procesadas
 */

import { db } from './server/db.js';
import { importHistory, parts } from './shared/schema.js';
import { eq, sql, desc } from 'drizzle-orm';

console.log('üìä REPORTE FINAL DE IMPORTACI√ìN COMPLETA');
console.log('=========================================');

async function generateFinalReport() {
  try {
    console.log('üîó Database connection established\n');

    // 1. Estado de la importaci√≥n
    console.log('1Ô∏è‚É£ ESTADO DE LA IMPORTACI√ìN:');
    console.log('-----------------------------');
    
    const [latestImport] = await db
      .select()
      .from(importHistory)
      .orderBy(desc(importHistory.id))
      .limit(1);

    if (latestImport) {
      console.log(`üÜî ID de importaci√≥n: ${latestImport.id}`);
      console.log(`üìÖ Iniciada: ${latestImport.startTime}`);
      console.log(`‚è∞ Finalizada: ${latestImport.endTime || 'En progreso'}`);
      console.log(`üìä Estado: ${latestImport.status}`);
      console.log(`üîÑ Progreso: ${latestImport.progress}%`);
      console.log(`üì¶ Procesadas: ${latestImport.processedItems || 0}`);
      console.log(`‚ûï Nuevas: ${latestImport.newItems || 0}`);
      console.log(`üîÑ Actualizadas: ${latestImport.updatedItems || 0}`);
      
      if (latestImport.errors && latestImport.errors.length > 0) {
        console.log(`‚ö†Ô∏è Errores: ${latestImport.errorCount || 0}`);
      }
    }

    // 2. Estad√≠sticas de piezas procesadas
    console.log('\n2Ô∏è‚É£ PROTECCI√ìN DE PIEZAS PROCESADAS:');
    console.log('-----------------------------------');
    
    const [protectionStats] = await db
      .select({
        totalPiezas: sql`COUNT(*)`,
        totalActivas: sql`COUNT(CASE WHEN ${parts.activo} = true THEN 1 END)`,
        totalProcesadas: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 THEN 1 END)`,
        procesadasActivas: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = true THEN 1 END)`,
        procesadasInactivas: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = false THEN 1 END)`,
        conDatosVehiculo: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = true AND ${parts.vehicleMarca} IS NOT NULL AND ${parts.vehicleMarca} != '' THEN 1 END)`
      })
      .from(parts);

    console.log(`üì¶ Total piezas en BD: ${protectionStats.totalPiezas}`);
    console.log(`‚úÖ Piezas activas: ${protectionStats.totalActivas}`);
    console.log(`üîß Piezas procesadas: ${protectionStats.totalProcesadas}`);
    console.log(`‚úÖ Procesadas activas: ${protectionStats.procesadasActivas}`);
    console.log(`‚ùå Procesadas inactivas: ${protectionStats.procesadasInactivas}`);
    console.log(`üöó Con datos de veh√≠culo: ${protectionStats.conDatosVehiculo}`);

    const protectionRate = protectionStats.totalProcesadas > 0 ? 
      ((protectionStats.procesadasActivas / protectionStats.totalProcesadas) * 100).toFixed(2) : '0.00';
    const vehicleDataRate = protectionStats.procesadasActivas > 0 ? 
      ((protectionStats.conDatosVehiculo / protectionStats.procesadasActivas) * 100).toFixed(2) : '0.00';

    console.log(`üõ°Ô∏è Tasa de protecci√≥n: ${protectionRate}%`);
    console.log(`üìã Tasa con datos de veh√≠culo: ${vehicleDataRate}%`);

    // 3. Evaluaci√≥n del √©xito
    console.log('\n3Ô∏è‚É£ EVALUACI√ìN DEL √âXITO:');
    console.log('------------------------');
    
    let overallSuccess = true;
    let successMessage = '';

    // Evaluar protecci√≥n de piezas procesadas
    if (protectionStats.procesadasInactivas === 0) {
      console.log('üéâ PROTECCI√ìN EXITOSA: Ninguna pieza procesada fue desactivada');
      successMessage += '‚úÖ Protecci√≥n total de piezas procesadas\n';
    } else {
      console.log(`‚ö†Ô∏è PROTECCI√ìN PARCIAL: ${protectionStats.procesadasInactivas} piezas procesadas desactivadas`);
      overallSuccess = false;
    }

    // Evaluar completitud de datos de veh√≠culo
    if (protectionStats.conDatosVehiculo > (protectionStats.procesadasActivas * 0.3)) {
      console.log('‚úÖ DATOS DE VEH√çCULO: Mayor√≠a de piezas procesadas tienen datos completos');
      successMessage += '‚úÖ Datos de veh√≠culo completados\n';
    } else {
      console.log('‚ö†Ô∏è DATOS DE VEH√çCULO: Algunas piezas procesadas necesitan m√°s datos');
    }

    // Evaluar estado de importaci√≥n
    if (latestImport && (latestImport.status === 'completed' || latestImport.status === 'partial')) {
      console.log('‚úÖ IMPORTACI√ìN: Completada exitosamente');
      successMessage += '‚úÖ Importaci√≥n completa finalizada\n';
    } else {
      console.log('üîÑ IMPORTACI√ìN: A√∫n en progreso o con errores');
      overallSuccess = false;
    }

    // 4. Distribuci√≥n por marca de piezas procesadas
    console.log('\n4Ô∏è‚É£ DISTRIBUCI√ìN POR MARCA (Top 10):');
    console.log('----------------------------------');
    
    const brandDistribution = await db
      .select({
        marca: parts.vehicleMarca,
        cantidad: sql`COUNT(*)`
      })
      .from(parts)
      .where(
        sql`${parts.idVehiculo} < 0 AND ${parts.activo} = true AND ${parts.vehicleMarca} IS NOT NULL AND ${parts.vehicleMarca} != ''`
      )
      .groupBy(parts.vehicleMarca)
      .orderBy(sql`COUNT(*) DESC`)
      .limit(10);

    if (brandDistribution.length > 0) {
      brandDistribution.forEach((brand, index) => {
        const marcaDisplay = brand.marca || 'Sin marca';
        console.log(`${(index + 1).toString().padStart(2)}. ${marcaDisplay.padEnd(15)} ${brand.cantidad} piezas`);
      });
    } else {
      console.log('No hay piezas procesadas con datos de marca disponibles');
    }

    // 5. Conclusi√≥n final
    console.log('\n5Ô∏è‚É£ CONCLUSI√ìN FINAL:');
    console.log('--------------------');
    
    if (overallSuccess) {
      console.log('üéâ ¬°IMPORTACI√ìN COMPLETA EXITOSA!');
      console.log('\nLogros conseguidos:');
      console.log(successMessage);
      console.log('‚úÖ El sistema de protecci√≥n de piezas procesadas funciona correctamente');
      console.log('‚úÖ La desactivaci√≥n autom√°tica fue completamente evitada');
      console.log('‚úÖ Las piezas procesadas mantienen su integridad en el cat√°logo');
    } else {
      console.log('‚ö†Ô∏è IMPORTACI√ìN COMPLETA CON OBSERVACIONES');
      console.log('\nPuntos exitosos:');
      console.log(successMessage);
      console.log('\nPuntos a mejorar identificados para futuras importaciones');
    }

    console.log('\n=========================================');
    console.log('üìä REPORTE FINAL COMPLETADO');

    return {
      importStatus: latestImport?.status,
      protectionRate: parseFloat(protectionRate),
      totalProcessed: protectionStats.totalProcesadas,
      activeProcessed: protectionStats.procesadasActivas,
      withVehicleData: protectionStats.conDatosVehiculo,
      success: overallSuccess
    };

  } catch (error) {
    console.error('‚ùå Error generando reporte final:', error);
    return { success: false, error: error.message };
  }
}

// Ejecutar reporte
generateFinalReport()
  .then((result) => {
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå Error en reporte:', error);
    process.exit(1);
  });