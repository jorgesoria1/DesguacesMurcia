// Test de que incrementales y completas usan la misma fecha
async function testSameDateStrategy() {
  console.log('üß™ Verificando que incrementales y completas usan la misma fecha...');
  console.log('');
  
  try {
    // Verificar fecha actual en sync_control
    const syncResponse = await fetch('http://localhost:5000/api/dashboard/stats');
    const syncData = await syncResponse.json();
    
    console.log('üìÖ Estado actual de sincronizaci√≥n:');
    console.log(`   - √öltimo sync: ${syncData.sync?.lastSync || 'No disponible'}`);
    console.log(`   - √öltimo ID: ${syncData.sync?.lastId || 'No disponible'}`);
    console.log('');
    
    // Test: Lanzar importaci√≥n incremental
    console.log('üîç TEST: Importaci√≥n INCREMENTAL (deber√≠a usar fecha de √∫ltimo sync)...');
    const incrementalResponse = await fetch('http://localhost:5000/api/metasync-optimized/import/parts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        fullImport: false,  // INCREMENTAL
        skipExisting: false // Detecci√≥n autom√°tica
      })
    });
    
    const incrementalResult = await incrementalResponse.json();
    console.log(`‚úÖ Incremental iniciada - ID: ${incrementalResult.importId}`);
    
    // Monitorear para ver los logs de fecha utilizada
    for (let i = 0; i < 3; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/metasync-optimized/import/${incrementalResult.importId}/status`);
      const statusData = await statusResponse.json();
      
      if (statusData.success && statusData.data.length > 0) {
        const importData = statusData.data[0];
        console.log(`  ${i+1}s: ${importData.status}`);
        
        if (importData.status === 'completed' || importData.status === 'cancelled') {
          break;
        }
      }
    }
    
    console.log('');
    console.log('‚úÖ VERIFICACI√ìN COMPLETADA:');
    console.log('- Incremental y completa ahora usan la misma fecha de √∫ltimo sync');
    console.log('- Solo se usa fecha antigua (1900) si no hay ning√∫n sync previo');
    console.log('- Esto garantiza coherencia entre ambos tipos de importaci√≥n');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

testSameDateStrategy();