etected potential vulnerability in auto-build-watch.js
Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
auto-build-watch.js
  buildProcess = spawn('npm', ['run', 'build'], {
    stdio: 'inherit',
    shell: true
  });
Detected potential vulnerability in auto-build-watch.js
Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
auto-build-watch.js
        const syncProcess = spawn('cp', ['-r', 'dist/public/.', 'server/public/'], { shell: true });
Detected potential vulnerability in client/src/components/RichTextEditor.tsx
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/src/components/RichTextEditor.tsx
      editorRef.current.innerHTML = sanitizedContent;
Detected potential vulnerability in client/src/components/RichTextEditor.tsx
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/src/components/RichTextEditor.tsx
      editorRef.current.innerHTML = sanitizedHtml;
Detected potential vulnerability in client/src/pages/AdminMessages.tsx
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/src/pages/AdminMessages.tsx
                                placeholder.innerHTML = `<div class="text-center"><div class="mb-1">❌</div>Imagen no disponible<br/><span class="text-xs">archivo ${index + 1}</span></div>`;
Detected potential vulnerability in client/src/pages/Checkout.tsx
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/src/pages/Checkout.tsx
              tempDiv.innerHTML = sanitizedHtml;
Detected potential vulnerability in client/src/utils/browserCompatibility.ts
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/src/utils/browserCompatibility.ts
        notification.innerHTML = `
          <div style="
            position: fixed;
            top: 20px;
            right: 20px;
            background: #fff3cd;
            color: #856404;
            padding: 12px 16px;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            font-size: 14px;
            max-width: 400px;
            z-index: 10000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          ">
            <strong>Aviso de Compatibilidad:</strong><br>
            ${message}
            <button onclick="this.parentElement.parentElement.remove()" style="
              float: right;
              background: none;
              border: none;
              font-size: 18px;
              cursor: pointer;
              color: #856404;
              margin-left: 10px;
            ">×</button>
          </div>
        `;
Detected potential vulnerability in debug_api_direct.js
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
debug_api_direct.js
  const apiKey = 'B2C23D2A-FA1C-455A-975A-B4BA85CA1E9F';
Detected potential vulnerability in debug_processed_vehicles_in_api.js
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
debug_processed_vehicles_in_api.js
  const apiKey = 'B2C23D2A-FA1C-455A-975A-B4BA85CA1E9F';
Detected potential vulnerability in debug_vehicle_import_simple.js
Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
debug_vehicle_import_simple.js
    const API_KEY = 'wYQo3uMCqJYXd9eFWnpSGW2qcKWHjAhAKvw2NNzMnE4KjrSKKW';
Detected potential vulnerability in deployment-validation-complete.js
Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
deployment-validation-complete.js
    const child = spawn('npx', ['tsc', '--noEmit', '--skipLibCheck'], {
      stdio: 'pipe',
      shell: true
    });
Detected potential vulnerability in migrations/update_schema.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
migrations/update_schema.ts
    await db.execute(/* sql */ `
      -- Crear tabla de sesiones si no existe
      CREATE TABLE IF NOT EXISTS sessions (
        sid varchar PRIMARY KEY,
        sess json NOT NULL,
        expire timestamp(6) NOT NULL
      );
      CREATE INDEX IF NOT EXISTS IDX_session_expire ON sessions (expire);
      
      -- Asegurar que la tabla carts tenga la columna session_id
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns 
          WHERE table_name = 'carts' AND column_name = 'session_id'
        ) THEN
          ALTER TABLE carts ADD COLUMN session_id text;
        END IF;
      END$$;
      -- Asegurar que la tabla orders tenga la columna session_id
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns 
          WHERE table_name = 'orders' AND column_name = 'session_id'
        ) THEN
          ALTER TABLE orders ADD COLUMN session_id text;
        END IF;
      END$$;
    `);
Detected potential vulnerability in production-deploy.js
Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
production-deploy.js
    execSync(command, { stdio: 'inherit' });
Detected potential vulnerability in server/api/brand-specific-handlers.ts
Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.
server/api/brand-specific-handlers.ts
    const countQuery = `SELECT COUNT(*) as total ${baseQuery}`;
Detected potential vulnerability in server/api/parts-brands-models.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/api/parts-brands-models.ts
        const dodgeCheck = await pool.query(`
          SELECT DISTINCT vehicle_marca 
          FROM parts 
          WHERE vehicle_marca ILIKE '%dodge%' 
          AND (
            (activo = true AND disponible_api = true) OR 
            (id_vehiculo < 0 AND activo = true AND disponible_api = true AND vehicle_marca IS NOT NULL AND vehicle_marca != '' 
             AND vehicle_marca != '» OTROS...' AND vehicle_modelo != 'MODELOS')
          )
          LIMIT 5
        `);
Detected potential vulnerability in server/routes.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/routes.ts
      const maxIdResult = await pool.query(`
        SELECT COALESCE(MAX(id_local), 0) + 1 as next_id 
        FROM vehicles
      `);
Detected potential vulnerability in server/routes.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/routes.ts
      const maxRefResult = await pool.query(`
        SELECT COALESCE(MAX(ref_local), 0) + 1 as next_ref 
        FROM parts
      `);
Detected potential vulnerability in server/routes.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/routes.ts
      const basicStats = await pool.query(`
        SELECT 
          (SELECT COUNT(*) FROM vehicles WHERE activo = true) as vehicle_count,
          (SELECT COUNT(*) FROM parts WHERE activo = true) as active_parts,
          (SELECT COUNT(*) FROM parts) as total_parts,
          (SELECT COUNT(*) FROM orders WHERE created_at > NOW() - INTERVAL '7 days') as recent_orders
      `);
Detected potential vulnerability in server/storage.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/storage.ts
    const result = await db.query(`
      SELECT id, provider, name, is_active, config, created_at, updated_at 
      FROM payment_config 
      ORDER BY name
    `);
Detected potential vulnerability in server/storage.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/storage.ts
    const result = await db.query(`
      SELECT id, name, description, base_price, free_shipping_threshold, 
             weight_based_pricing, price_per_kg, max_weight, estimated_days,
             is_active, created_at, updated_at 
      FROM shipping_config 
      WHERE is_active = true
      ORDER BY name
    `);
Detected potential vulnerability in server/utils/disable-zero-price-parts-new.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/utils/disable-zero-price-parts-new.ts
    const countResult = await db.execute(
      `SELECT COUNT(*) as count
       FROM parts 
       WHERE activo = true 
         AND id_vehiculo > 0
         AND (
           precio IS NULL 
           OR precio = '' 
           OR precio = '0' 
           OR precio = '0,00'
           OR precio = '0.00'
           OR (precio ~ '^[0-9]+([,.][0-9]+)?$' AND CAST(REPLACE(precio, ',', '.') AS NUMERIC) = 0)
         )
       `
    );
Detected potential vulnerability in server/utils/disable-zero-price-parts-new.ts
Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.
server/utils/disable-zero-price-parts-new.ts
    await db.execute(
      `UPDATE parts 
         SET activo = false, updated_at = NOW()
         WHERE activo = true 
           AND id_vehiculo > 0
           AND (
             precio IS NULL 
             OR precio = '' 
             OR precio = '0' 
             OR precio = '0,00' 
             OR precio = '0.00'
             OR (precio ~ '^[0-9]+([,.][0-9]+)?$' AND CAST(REPLACE(precio, ',', '.') AS NUMERIC) = 0)
           )
       `
    );
Detected potential vulnerability in test_payment_workflow.cjs
The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead.
test_payment_workflow.cjs
  const cipher = crypto.createCipher('des-ede3-cbc', key);
Detected potential vulnerability in test_redsys_complete.cjs
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
test_redsys_complete.cjs
  secretKey: 'sq7HjrUOBfKmC576ILgskD5srU870gJ7',
Detected potential vulnerability in test_redsys_signature.cjs
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
test_redsys_signature.cjs
  secretKey: 'sq7HjrUOBfKmC576ILgskD5srU870gJ7'  // Clave oficial