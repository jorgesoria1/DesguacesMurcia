// @ts-nocheck
import React, { useEffect, useState, Suspense } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Link } from 'wouter';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "@/components/ui/carousel";
import { 
  Car, 
  Settings, 
  Wrench, 
  Battery, 
  Zap, 
  Lightbulb, 
  Gauge, 
  LucideIcon,
  SquareAsterisk,
  ChevronRight as ChevronRightIcon,
  ChevronLeft,
  Thermometer
} from 'lucide-react';
import HeroSection from '@/components/HeroSection';
import InfoSection from '@/components/InfoSection';
import GoogleReviewsSlider from '@/components/GoogleReviewsSlider';
import VehicleCard from '@/components/VehicleCard';
import PartCard from '@/components/PartCard';
import DynamicHomepageBlocks from '@/components/DynamicHomepageBlocks';
// Usamos 'any' temporalmente para evitar problemas de tipado
// mientras nos enfocamos en arreglar la funcionalidad de los tabs

// Componente para cargar piezas por categor√≠a
function CategoryPartsContent({ category }: { category: string }) {
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");

  const { data: categoryParts, isLoading: isLoadingCategory, error: categoryError } = useQuery({
    queryKey: ['category-parts', category],
    queryFn: async () => {
      console.log(`üîç Buscando piezas para categor√≠a: "${category}"`);
      
      // Usar el mismo endpoint que funciona en Parts.tsx
      const params = new URLSearchParams();
      params.set("familia", category);
      params.set("activo", "true");
      params.set("limit", "8");
      params.set("offset", "0");
      params.set("getTotalCount", "true");
      params.set("orden", "newest");

      const endpoint = `/api/search-parts?${params.toString()}`;
      console.log(`üîé Usando endpoint: ${endpoint}`);
      
      const response = await fetch(endpoint);
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const parts = data?.data || [];
      
      console.log(`‚úÖ Piezas encontradas para "${category}": ${parts.length}`);
      
      if (parts.length > 0) {
        console.log(`üì¶ Primera pieza de "${category}":`, {
          descripcion: parts[0].descripcionArticulo,
          familia: parts[0].descripcionFamilia
        });
      } else {
        console.log(`üö® No se encontraron piezas para "${category}"`);
      }
      
      return parts;
    },
    staleTime: 180000, // Cache por 3 minutos
    retry: 1
  });

  const parts = categoryParts || [];

  return (
    <>
      {isLoadingCategory ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="bg-white rounded-lg shadow-md p-4 animate-pulse">
              <div className="h-40 bg-gray-200 rounded mb-4"></div>
              <div className="space-y-3">
                <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                <div className="h-3 bg-gray-200 rounded"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2"></div>
              </div>
            </div>
          ))}
        </div>
      ) : categoryError ? (
        <div className="text-center py-8">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-red-900 mb-2">
              Error al cargar piezas
            </h3>
            <p className="text-red-700">
              No se pudieron cargar las piezas de {category}
            </p>
          </div>
        </div>
      ) : parts.length > 0 ? (
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {parts.map((part: any) => (
              <PartCard key={part.id || part.refLocal} part={part} />
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {parts.map((part: any) => (
              <PartCard key={part.id || part.refLocal} part={part} />
            ))}
          </div>
        )
      ) : (
        <div className="text-center py-8">
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No hay piezas disponibles en {category}
            </h3>
            <p className="text-gray-600 mb-4">
              Esta categor√≠a no tiene piezas disponibles en este momento.</p>
        [...Array(8)].map((_, i) => (
          <div key={i} className="bg-white rounded-lg shadow-md p-4 animate-pulse">
            <div className="h-40 bg-gray-200 rounded mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-3 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        ))
      ) : categoryError ? (
        <div className="col-span-4 text-center py-8">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-red-900 mb-2">
              Error al cargar piezas
            </h3>
            <p className="text-red-700">
              No se pudieron cargar las piezas de {category}
            </p>
          </div>
        </div>
      ) : parts.length > 0 ? (
        parts.map((part: any) => (
          <PartCard key={part.id || part.refLocal} part={part} />
        ))
      ) : (
        <div className="col-span-4 text-center py-8">
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No hay piezas disponibles en {category}
            </h3>
            <p className="text-gray-600 mb-4">
              Esta categor√≠a no tiene piezas disponibles en este momento.
            </p>
            <Link href={`/piezas?familia=${encodeURIComponent(category)}`}>
              <Button variant="outline" size="sm">
                Buscar en cat√°logo completo
              </Button>
            </Link>
          </div>
        </div>
      )}
      
      {/* Enlace para ver todas las piezas de la categor√≠a */}
      {parts.length > 0 && (
        <div className="col-span-4 text-center mt-8">
          <Link href={`/piezas?familia=${encodeURIComponent(category)}`}>
            <Button variant="outline" className="bg-white hover:bg-gray-50">
              Ver todas las piezas de {category}
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}

// Importar los logos reales de las marcas
import audiLogo from '../assets/brands/real/audi-logo.svg';
import bmwLogo from '../assets/brands/real/bmw-logo.svg';
import mercedesLogo from '../assets/brands/real/mercedes-logo-new.svg';
import volkswagenLogo from '../assets/brands/real/volkswagen-logo.svg';
import toyotaLogo from '../assets/brands/real/toyota-logo.svg';
import renaultLogo from '../assets/brands/real/renault-logo.svg';
import seatLogo from '../assets/brands/real/seat-logo.svg';

export default function Home() {
  // ‚ö° DEBUG DEVELOPMENT MODE ‚ö°
  const isDevelopment = import.meta.env.DEV;
  const debugTimestamp = Date.now();
  
  const { data: vehiclesResponse } = useQuery({
    queryKey: ['optimized-vehicles'],
    queryFn: () => fetch('/api/optimized/vehicles?limit=10&withPartCounts=true&orden=fecha_desc').then(res => res.json()),
    staleTime: 30000 // Cache por 30 segundos
  });

  const { data: categoriesData } = useQuery({
    queryKey: ['parts-categories'],
    queryFn: () => fetch('/api/parts/families').then(res => res.json()),
    staleTime: 30000
  });

  // Fetch homepage blocks from CMS
  const { data: homepageBlocks, isLoading: isLoadingBlocks } = useQuery({
    queryKey: ['/api/cms/homepage-blocks'],
    queryFn: async () => {
      const response = await fetch('/api/cms/homepage-blocks');
      if (!response.ok) throw new Error('Error al cargar bloques');
      return response.json();
    },
    staleTime: 300000, // Cache por 5 minutos
    retry: 1
  });

  const vehicles = vehiclesResponse?.data || [];
  const categories = categoriesData || [];

  // Cargar piezas usando el mismo endpoint que funciona en Parts.tsx
  const { data: partsData, isLoading: isLoadingParts, error: partsError } = useQuery({
    queryKey: ['parts-for-home'],
    queryFn: async () => {
      try {
        console.log('üîç Iniciando carga de piezas para home...');
        
        // Usar el mismo endpoint que funciona en Parts.tsx con par√°metros optimizados
        const params = new URLSearchParams();
        params.set("activo", "true");
        params.set("limit", "50");
        params.set("offset", "0");
        params.set("getTotalCount", "true");
        params.set("orden", "newest");

        const endpoint = `/api/search-parts?${params.toString()}`;
        console.log(`üîé Usando endpoint optimizado: ${endpoint}`);
        
        const response = await fetch(endpoint);
        
        console.log(`üì° Respuesta del endpoint:`, {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok
        });
        
        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log(`‚úÖ Datos recibidos:`, {
          dataStructure: Object.keys(data),
          partsLength: data?.data?.length || 0,
          pagination: data?.pagination,
          firstPart: data?.data?.[0] || 'no parts'
        });
        
        const parts = data?.data || [];
        console.log(`üìä Piezas procesadas para home: ${parts.length} piezas encontradas`);
        
        if (parts.length > 0) {
          console.log(`‚ú® Primera pieza:`, parts[0]);
        }
        
        return parts;
      } catch (error) {
        console.error('üí• Error loading parts for home:', error);
        throw error; // Permitir que React Query maneje el error
      }
    },
    staleTime: 180000, // Cache por 3 minutos
    refetchOnMount: true,
    retry: 1
  });

  const allParts = partsData || [];

  // Funci√≥n para obtener piezas por categor√≠a usando el mismo endpoint que Parts.tsx
  const getPartsByCategory = async (category: string) => {
    try {
      console.log(`üîç Buscando piezas para categor√≠a: "${category}"`);
      
      // Usar el mismo endpoint que funciona en Parts.tsx
      const params = new URLSearchParams();
      params.set("familia", category);
      params.set("activo", "true");
      params.set("limit", "8");
      params.set("offset", "0");
      params.set("getTotalCount", "true");
      params.set("orden", "newest");

      const endpoint = `/api/search-parts?${params.toString()}`;
      console.log(`üîé Usando endpoint: ${endpoint}`);
      
      const response = await fetch(endpoint);
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const parts = data?.data || [];
      
      console.log(`‚úÖ Piezas encontradas para "${category}": ${parts.length}`);
      
      if (parts.length > 0) {
        console.log(`üì¶ Primera pieza de "${category}":`, {
          descripcion: parts[0].descripcionArticulo,
          familia: parts[0].descripcionFamilia
        });
      }
      
      return parts;
    } catch (error) {
      console.error(`üí• Error cargando piezas para categor√≠a "${category}":`, error);
      return [];
    }
  };

  // Debug b√°sico
  console.log('üîç Estado de piezas en Home:', { 
    allPartsLength: allParts.length,
    categoriesLength: categories.length,
    isLoadingParts
  });

  return (
    <>

      
      <HeroSection />

      {/* Vehicles Section */}
      <section className="py-8 bg-gradient-to-b from-primary/5 to-background w-full">
        <div className="w-full max-w-[1400px] mx-auto px-6">
          <div className="mb-4 text-center">
            <h2 className="text-3xl font-montserrat font-semibold text-gray-800 mb-2">Cat√°logo de Veh√≠culos</h2>
            <p className="text-sm text-gray-600">Encuentra las piezas que necesitas para tu veh√≠culo</p>
          </div>
          <Carousel className="w-full max-w-7xl mx-auto px-4 sm:px-0">
            <CarouselContent>
              {vehicles && vehicles.length > 0 ? (
                // Ordenar por fecha de actualizaci√≥n descendente (m√°s recientes primero)
                [...vehicles].sort((a, b) => {
                  // Primero intentar ordenar por fecha de actualizaci√≥n
                  if (a.fechaActualizacion && b.fechaActualizacion) {
                    return new Date(b.fechaActualizacion).getTime() - new Date(a.fechaActualizacion).getTime();
                  }
                  // Luego por fecha de creaci√≥n si est√° disponible
                  if (a.fechaCreacion && b.fechaCreacion) {
                    return new Date(b.fechaCreacion).getTime() - new Date(a.fechaCreacion).getTime();
                  }
                  // Si no hay fechas, ordenar por ID (m√°s alto = m√°s nuevo)
                  return (b.id || 0) - (a.id || 0);
                }).map((vehicle: any) => (
                  <CarouselItem key={vehicle.id} className="md:basis-1/2 lg:basis-1/4">
                    <VehicleCard vehicle={vehicle} />
                  </CarouselItem>
                ))
              ) : (
                <CarouselItem className="flex justify-center w-full">
                  <Card className="w-full p-6 text-center">
                    <CardContent>
                      <p className="text-muted-foreground">Cargando veh√≠culos...</p>
                    </CardContent>
                  </Card>
                </CarouselItem>
              )}
            </CarouselContent>
            <CarouselPrevious />
            <CarouselNext />
          </Carousel>
          

        </div>
      </section>

      {/* Homepage Service Blocks */}
      {homepageBlocks && !isLoadingBlocks && (
        <DynamicHomepageBlocks blocks={homepageBlocks} />
      )}

      {/* Parts Section */}
      <section className="py-8 w-full">
        <div className="w-full max-w-[1400px] mx-auto px-6">
          <div className="mb-4 text-center">
            <h2 className="text-3xl font-montserrat font-semibold text-gray-800 mb-2">Cat√°logo de Piezas</h2>
            <p className="text-sm text-gray-600">Todas las piezas que necesitas en un solo lugar</p>
          </div>

          {categories.length > 0 ? (
            <Tabs defaultValue="todas" className="w-full mx-auto">
            <div className="bg-white rounded-lg p-1 mb-4 border">
              <div className="relative flex items-center">
                <Button 
                  variant="outline" 
                  size="icon"
                  className="absolute left-0 z-10 rounded-none h-[48px] px-3 border-y flex items-center justify-center"
                  onClick={() => {
                    const tabsList = document.querySelector('[role="tablist"]');
                    if (tabsList && tabsList instanceof HTMLElement) {
                      import('@/utils/browserCompatibility').then(({ safeScrollBy }) => {
                        safeScrollBy(tabsList, { left: -200, behavior: 'smooth' });
                      }).catch(error => console.warn('Error importing browser compatibility:', error));
                    }
                  }}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>

                <TabsList className="flex w-full overflow-x-auto py-1 justify-start px-12 scrollbar-hide bg-white">
                  {/* Tab "Todas Las Piezas" */}
                  <TabsTrigger 
                    value="todas" 
                    className="flex-shrink-0 px-4 py-2 text-sm font-medium rounded data-[state=active]:bg-primary data-[state=active]:text-white"
                  >
                    Todas Las Piezas
                  </TabsTrigger>

                  {/* Tabs din√°micos basados en categor√≠as reales */}
                  {categories.filter(cat => cat !== 'GENERICO' && cat !== 'GEN√âRICO' && cat !== 'MOTOS').map((category) => {
                    // Formatear categor√≠a: primera letra de cada palabra en may√∫scula
                    const formattedCategory = category
                      .toLowerCase()
                      .split(' ')
                      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                      .join(' ');
                    
                    return (
                      <TabsTrigger 
                        key={category}
                        value={category.toLowerCase().replace(/\s+/g, '-').replace(/[/]/g, '-')} 
                        className="flex-shrink-0 px-4 py-2 text-sm font-medium rounded data-[state=active]:bg-primary data-[state=active]:text-white whitespace-nowrap"
                      >
                        {formattedCategory}
                      </TabsTrigger>
                    );
                  })}
                </TabsList>

                <Button 
                  variant="outline" 
                  size="icon"
                  className="absolute right-0 z-10 rounded-none h-[48px] px-3 border-y flex items-center justify-center"
                  onClick={() => {
                    const tabsList = document.querySelector('[role="tablist"]');
                    if (tabsList && tabsList instanceof HTMLElement) {
                      import('@/utils/browserCompatibility').then(({ safeScrollBy }) => {
                        safeScrollBy(tabsList, { left: 200, behavior: 'smooth' });
                      }).catch(error => console.warn('Error importing browser compatibility:', error));
                    }
                  }}
                >
                  <ChevronRightIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>

              {/* Contenido para "Todas Las Piezas" */}
              <TabsContent value="todas">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {isLoadingParts ? (
                    [...Array(8)].map((_, i) => (
                      <div key={i} className="bg-white rounded-lg shadow-md p-4 animate-pulse">
                        <div className="h-40 bg-gray-200 rounded mb-4"></div>
                        <div className="space-y-3">
                          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                          <div className="h-3 bg-gray-200 rounded"></div>
                          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                        </div>
                      </div>
                    ))
                  ) : partsError ? (
                    <div className="col-span-4 text-center py-8">
                      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
                        <h3 className="text-lg font-medium text-red-900 mb-2">
                          Error al cargar piezas
                        </h3>
                        <p className="text-red-700 mb-4">
                          {partsError.message || 'Error desconocido al cargar las piezas'}
                        </p>
                        <Button 
                          onClick={() => window.location.reload()} 
                          variant="outline" 
                          className="border-red-300 text-red-700 hover:bg-red-50"
                        >
                          Recargar p√°gina
                        </Button>
                      </div>
                    </div>
                  ) : allParts && allParts.length > 0 ? (
                    allParts.slice(0, 8).map((part: any) => (
                      <PartCard key={part.id || part.refLocal} part={part} />
                    ))
                  ) : (
                    <div className="col-span-4 text-center py-8">
                      <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                        <h3 className="text-lg font-medium text-gray-900 mb-2">
                          No hay piezas disponibles
                        </h3>
                        <p className="text-gray-600 mb-4">
                          No se encontraron piezas para mostrar en este momento.
                        </p>
                        <Button 
                          onClick={() => window.location.reload()} 
                          variant="outline"
                        >
                          Recargar p√°gina
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
                

              </TabsContent>

              {/* Contenido din√°mico para cada categor√≠a */}
              {categories.filter(cat => cat !== 'GENERICO' && cat !== 'GEN√âRICO' && cat !== 'MOTOS').map((category) => {
                const tabValue = category.toLowerCase().replace(/\s+/g, '-').replace(/[/]/g, '-');
                
                return (
                  <TabsContent key={category} value={tabValue}>
                    <CategoryPartsContent category={category} />
                  </TabsContent>
                );
              })}
            </Tabs>
          ) : (
            <div className="flex justify-center">
              <Card className="w-full max-w-md p-6 text-center">
                <CardContent>
                  <p className="text-muted-foreground">Cargando categor√≠as de piezas...</p>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </section>

      {/* Featured Brands Section */}
      <section className="py-8 bg-white w-full">
        <div className="w-full max-w-[1400px] mx-auto px-6">
          <Carousel className="w-full max-w-7xl mx-auto">
            <CarouselContent>
              {[
                { name: 'AUDI', logo: audiLogo },
                { name: 'BMW', logo: bmwLogo },
                { name: 'MERCEDES-BENZ', logo: mercedesLogo },
                { name: 'VOLKSWAGEN', logo: volkswagenLogo },
                { name: 'TOYOTA', logo: toyotaLogo },
                { name: 'RENAULT', logo: renaultLogo },
                { name: 'SEAT', logo: seatLogo }
              ].map((brand) => (
                <CarouselItem key={brand.name} className="md:basis-1/4 lg:basis-1/4">
                  <Link 
                    href={`/piezas?marca=${encodeURIComponent(brand.name)}`}
                    className="flex items-center justify-center p-6 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors h-full"
                  >
                    <div className="text-center">
                      <img 
                        src={brand.logo} 
                        alt={`${brand.name} logo`}
                        className="object-contain mx-auto mb-4 w-20 h-20"
                      />
                      <span className="font-medium text-sm">{brand.name}</span>
                    </div>
                  </Link>
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious />
            <CarouselNext />
          </Carousel>
        </div>
      </section>

      <InfoSection />
      
      <GoogleReviewsSlider />
    </>
  );
}