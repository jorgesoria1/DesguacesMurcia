#!/usr/bin/env node

// Script para analizar la estructura real del API y extraer datos que ya vienen separados
import fetch from 'node-fetch';

async function analyzeApiStructureDirect() {
  console.log('üîç ANALIZANDO ESTRUCTURA REAL DEL API METASYNC\n');
  
  try {
    const apiKey = process.env.METASYNC_API_KEY;
    if (!apiKey) {
      console.error('‚ùå METASYNC_API_KEY no encontrada');
      return;
    }

    // Endpoint de piezas que seg√∫n el usuario contiene datos separados de piezas y veh√≠culos
    const url = 'https://live.metasync.es/Api/Almacen/RecuperarCambiosCanal';
    
    console.log('üì° Llamando al endpoint de piezas...');
    console.log(`URL: ${url}`);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'apikey': apiKey,
        'fecha': '2025-01-01',
        'lastid': '0',
        'offset': '0',
        'canal': 'Web',
        'idempresa': '1'
      }
    });

    if (!response.ok) {
      console.error(`‚ùå Error HTTP: ${response.status} ${response.statusText}`);
      return;
    }

    const data = await response.json();
    console.log('‚úÖ Respuesta recibida del API');
    
    // Analizar la estructura completa
    console.log('\nüìã ESTRUCTURA COMPLETA DE LA RESPUESTA:');
    console.log('Claves principales:', Object.keys(data));
    
    // Buscar datos de veh√≠culos separados
    if (data.vehiculos) {
      console.log('\nüöó DATOS DE VEH√çCULOS ENCONTRADOS:');
      console.log(`Total veh√≠culos: ${data.vehiculos.length}`);
      
      // Mostrar primeros 5 veh√≠culos completos
      console.log('\nPrimeros 5 veh√≠culos (estructura completa):');
      data.vehiculos.slice(0, 5).forEach((vehiculo, index) => {
        console.log(`\n--- Veh√≠culo ${index + 1} ---`);
        console.log(JSON.stringify(vehiculo, null, 2));
      });
    }
    
    // Buscar datos de piezas
    if (data.articulos || data.parts || data.piezas) {
      const piezas = data.articulos || data.parts || data.piezas;
      console.log('\nüîß DATOS DE PIEZAS ENCONTRADOS:');
      console.log(`Total piezas: ${piezas.length}`);
      
      // Mostrar primeras 3 piezas completas
      console.log('\nPrimeras 3 piezas (estructura completa):');
      piezas.slice(0, 3).forEach((pieza, index) => {
        console.log(`\n--- Pieza ${index + 1} ---`);
        console.log(JSON.stringify(pieza, null, 2));
      });
    }
    
    // Buscar espec√≠ficamente datos relacionados con veh√≠culos procesados
    console.log('\nüîç BUSCANDO RELACIONES VEH√çCULO-PIEZA:');
    
    if (data.vehiculos && (data.articulos || data.parts || data.piezas)) {
      const vehiculos = data.vehiculos;
      const piezas = data.articulos || data.parts || data.piezas;
      
      // Buscar veh√≠culos con ID negativo (procesados)
      const vehiculosProcesados = vehiculos.filter(v => v.id && v.id < 0);
      console.log(`Veh√≠culos procesados (ID negativo): ${vehiculosProcesados.length}`);
      
      if (vehiculosProcesados.length > 0) {
        console.log('\nPrimeros 3 veh√≠culos procesados:');
        vehiculosProcesados.slice(0, 3).forEach((vehiculo, index) => {
          console.log(`\n--- Veh√≠culo Procesado ${index + 1} ---`);
          console.log(`ID: ${vehiculo.id}`);
          console.log(`ID Local: ${vehiculo.idLocal || vehiculo.id_local || 'No disponible'}`);
          console.log(`Marca: ${vehiculo.marca || 'No disponible'}`);
          console.log(`Modelo: ${vehiculo.modelo || 'No disponible'}`);
          console.log(`Versi√≥n: ${vehiculo.version || 'No disponible'}`);
          console.log('Estructura completa:', JSON.stringify(vehiculo, null, 2));
        });
      }
      
      // Buscar piezas que referencien veh√≠culos procesados
      const piezasProcesadas = piezas.filter(p => p.idVehiculo && p.idVehiculo < 0);
      console.log(`\nPiezas de veh√≠culos procesados: ${piezasProcesadas.length}`);
      
      if (piezasProcesadas.length > 0) {
        console.log('\nPrimeras 3 piezas procesadas:');
        piezasProcesadas.slice(0, 3).forEach((pieza, index) => {
          console.log(`\n--- Pieza Procesada ${index + 1} ---`);
          console.log(`ID Veh√≠culo: ${pieza.idVehiculo}`);
          console.log(`Ref Local: ${pieza.refLocal || pieza.ref_local || 'No disponible'}`);
          console.log(`Descripci√≥n: ${pieza.descripcionArticulo || pieza.descripcion || 'No disponible'}`);
          console.log('Estructura completa:', JSON.stringify(pieza, null, 2));
        });
      }
    }
    
    console.log('\nüéØ RESUMEN DEL AN√ÅLISIS:');
    console.log('Esta informaci√≥n muestra exactamente c√≥mo extraer');
    console.log('los datos de veh√≠culos que ya vienen separados en el API.');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

analyzeApiStructureDirect();