/**
 * SCRIPT DE PRUEBA: Extracci√≥n Directa de Datos del API MetaSync
 * 
 * Este script valida que el sistema ahora extrae datos de veh√≠culos directamente
 * del array vehiculos que viene en la misma respuesta del endpoint RecuperarCambiosCanal
 */

// Este script simula la l√≥gica de extracci√≥n directa sin importar el servicio
// Para verificar que la l√≥gica funciona correctamente

async function testDirectApiExtraction() {
  console.log('üéØ TEST: Validando extracci√≥n directa de datos del API MetaSync');
  console.log('======================================================');
  
  try {
    console.log('‚úÖ Iniciando simulaci√≥n de extracci√≥n directa');
    
    // Simular respuesta del API que incluye tanto piezas como veh√≠culos
    const mockApiResponse = {
      data: {
        piezas: [
          {
            refLocal: 994087,
            idVehiculo: -12345, // Veh√≠culo procesado
            descripcionArticulo: "PUERTA DELANTERA IZQUIERDA",
            descripcionFamilia: "CARROCER√çA",
            precio: -1, // Marker para piezas procesadas
            fechaMod: "2025-07-30T10:00:00Z"
          },
          {
            refLocal: 123456,
            idVehiculo: 55000, // Veh√≠culo f√≠sico
            descripcionArticulo: "FARO DELANTERO",
            descripcionFamilia: "ALUMBRADO",
            precio: 15000, // 150‚Ç¨
            fechaMod: "2025-07-30T10:00:00Z"
          }
        ],
        vehiculos: [
          {
            idLocal: -12345, // Veh√≠culo procesado correspondiente a la pieza 994087
            nombreMarca: "DODGE",
            nombreModelo: "CALIBER",
            nombreVersion: "2.0 CRD",
            anyoVehiculo: 2008,
            combustible: "DIESEL",
            codigo: "PROC-12345"
          },
          {
            idLocal: 55000, // Veh√≠culo f√≠sico
            nombreMarca: "FORD",
            nombreModelo: "FOCUS",
            nombreVersion: "1.6 TDCI",
            anyoVehiculo: 2015,
            combustible: "DIESEL",
            codigo: "REF-55000"
          }
        ]
      }
    };
    
    console.log('üìã Datos de prueba preparados:');
    console.log(`   - ${mockApiResponse.data.piezas.length} piezas`);
    console.log(`   - ${mockApiResponse.data.vehiculos.length} veh√≠culos`);
    console.log(`   - Incluye caso espec√≠fico: pieza 994087 ‚Üí veh√≠culo DODGE CALIBER`);
    
    // Extraer arrays como lo hace el sistema real
    const partBatch = mockApiResponse.data.piezas;
    const vehicleBatch = mockApiResponse.data.vehiculos;
    
    // Crear mapa de veh√≠culos como lo hace el sistema real
    const vehiculosApiMap = new Map();
    
    for (const vehiculo of vehicleBatch) {
      if (vehiculo.idLocal || vehiculo.id) {
        const vehiculoId = vehiculo.idLocal || vehiculo.id;
        
        const vehiculoData = {
          idLocal: vehiculoId,
          nombreMarca: vehiculo.nombreMarca || vehiculo.marca || '',
          nombreModelo: vehiculo.nombreModelo || vehiculo.modelo || '',
          nombreVersion: vehiculo.nombreVersion || vehiculo.version || '',
          anyoVehiculo: vehiculo.anyoVehiculo || vehiculo.anyo || 0,
          combustible: vehiculo.combustible || ''
        };
        
        vehiculosApiMap.set(vehiculoId, vehiculoData);
      }
    }
    
    console.log(`üìã Mapa de veh√≠culos creado: ${vehiculosApiMap.size} veh√≠culos`);
    
    // Verificar correlaci√≥n para el caso espec√≠fico (pieza 994087)
    const piezaEspecifica = partBatch.find(p => p.refLocal === 994087);
    if (piezaEspecifica) {
      const vehiculoCorrelacionado = vehiculosApiMap.get(piezaEspecifica.idVehiculo);
      
      console.log('üéØ CASO ESPEC√çFICO - Pieza 994087:');
      console.log(`   - ID Veh√≠culo: ${piezaEspecifica.idVehiculo}`);
      console.log(`   - Veh√≠culo encontrado: ${vehiculoCorrelacionado ? 'S√ç' : 'NO'}`);
      
      if (vehiculoCorrelacionado) {
        console.log(`   - Marca: ${vehiculoCorrelacionado.nombreMarca}`);
        console.log(`   - Modelo: ${vehiculoCorrelacionado.nombreModelo}`);
        console.log(`   - Versi√≥n: ${vehiculoCorrelacionado.nombreVersion}`);
        console.log(`   - A√±o: ${vehiculoCorrelacionado.anyoVehiculo}`);
        console.log(`   - Combustible: ${vehiculoCorrelacionado.combustible}`);
        
        // ‚úÖ √âXITO: Datos extra√≠dos directamente del API
        console.log('   ‚úÖ EXTRACCI√ìN DIRECTA EXITOSA');
      } else {
        console.log('   ‚ùå ERROR: No se encontr√≥ veh√≠culo correlacionado');
      }
    }
    
    // Verificar todas las piezas procesadas
    const piezasProcesadas = partBatch.filter(p => p.idVehiculo < 0);
    console.log(`\nüîç AN√ÅLISIS COMPLETO - ${piezasProcesadas.length} piezas procesadas:`);
    
    let exitosas = 0;
    let fallidas = 0;
    
    for (const pieza of piezasProcesadas) {
      const vehiculo = vehiculosApiMap.get(pieza.idVehiculo);
      
      if (vehiculo && (vehiculo.nombreMarca || vehiculo.nombreModelo)) {
        exitosas++;
        console.log(`   ‚úÖ Pieza ${pieza.refLocal}: ${vehiculo.nombreMarca} ${vehiculo.nombreModelo}`);
      } else {
        fallidas++;
        console.log(`   ‚ùå Pieza ${pieza.refLocal}: Sin datos de veh√≠culo`);
      }
    }
    
    const tasaExito = piezasProcesadas.length > 0 ? (exitosas / piezasProcesadas.length * 100) : 0;
    
    console.log(`\nüìä RESULTADOS FINALES:`);
    console.log(`   - Piezas procesadas analizadas: ${piezasProcesadas.length}`);
    console.log(`   - Correlaciones exitosas: ${exitosas}`);
    console.log(`   - Correlaciones fallidas: ${fallidas}`);
    console.log(`   - Tasa de √©xito: ${tasaExito.toFixed(1)}%`);
    
    if (tasaExito >= 90) {
      console.log('\nüéØ ‚úÖ PRUEBA EXITOSA: El sistema extrae datos directamente del API');
      console.log('     Las piezas procesadas ahora obtienen datos reales de veh√≠culos');
      console.log('     sin depender de pattern matching como fallback');
    } else {
      console.log('\n‚ùå PRUEBA FALLIDA: El sistema no est√° extrayendo datos correctamente');
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
  }
}

// Ejecutar prueba
testDirectApiExtraction().catch(console.error);