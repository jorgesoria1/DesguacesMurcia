#!/usr/bin/env node

/**
 * Script para ejecutar la desactivaci√≥n inteligente de piezas problem√°ticas
 */

import { db } from './server/db.js';
import { parts } from './shared/schema.js';
import { eq, sql, and, or, isNull } from 'drizzle-orm';

console.log('üßπ Ejecutando desactivaci√≥n inteligente de piezas problem√°ticas...');

async function executeSmartDeactivation() {
  try {
    console.log('\nüìä Estado inicial de piezas...');
    
    // Estad√≠sticas iniciales
    const [initialStats] = await db
      .select({
        total: sql`COUNT(*)`,
        activas: sql`COUNT(CASE WHEN ${parts.activo} = true THEN 1 END)`,
        procesadas: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = true THEN 1 END)`
      })
      .from(parts);

    console.log(`   ‚Ä¢ Total piezas: ${initialStats.total}`);
    console.log(`   ‚Ä¢ Activas: ${initialStats.activas}`);
    console.log(`   ‚Ä¢ Procesadas activas: ${initialStats.procesadas}`);

    // Desactivar piezas problem√°ticas
    console.log('\nüîÑ Desactivando piezas problem√°ticas...');
    
    const deactivateResult = await db
      .update(parts)
      .set({ 
        activo: false,
        fechaActualizacion: sql`NOW()`
      })
      .where(
        and(
          eq(parts.activo, true),
          or(
            // Piezas regulares con precio cero/nulo
            and(
              sql`${parts.idVehiculo} > 0`,
              or(
                sql`CAST(REPLACE(${parts.precio}, ',', '.') AS NUMERIC) = 0`,
                isNull(parts.precio),
                eq(parts.precio, ''),
                eq(parts.precio, '0'),
                eq(parts.precio, '0,00')
              )
            ),
            // Piezas procesadas con precio negativo (excepto -1) o nombre "NO IDENTIFICADO"
            and(
              sql`${parts.idVehiculo} < 0`,
              or(
                sql`CAST(REPLACE(${parts.precio}, ',', '.') AS NUMERIC) < -1`,
                sql`UPPER(${parts.descripcionArticulo}) LIKE '%NO IDENTIFICADO%'`,
                sql`UPPER(${parts.vehicleMarca}) LIKE '%NO IDENTIFICADO%'`
              )
            )
          )
        )
      );

    console.log(`‚úÖ Desactivadas ${deactivateResult.rowCount || 0} piezas problem√°ticas`);

    // Estad√≠sticas finales
    console.log('\nüìä Estado final de piezas...');
    
    const [finalStats] = await db
      .select({
        total: sql`COUNT(*)`,
        activas: sql`COUNT(CASE WHEN ${parts.activo} = true THEN 1 END)`,
        procesadas: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = true THEN 1 END)`,
        procesadasConDatos: sql`COUNT(CASE WHEN ${parts.idVehiculo} < 0 AND ${parts.activo} = true AND ${parts.vehicleMarca} IS NOT NULL AND ${parts.vehicleMarca} != '' THEN 1 END)`
      })
      .from(parts);

    console.log(`   ‚Ä¢ Total piezas: ${finalStats.total}`);
    console.log(`   ‚Ä¢ Activas: ${finalStats.activas}`);
    console.log(`   ‚Ä¢ Procesadas activas: ${finalStats.procesadas}`);
    console.log(`   ‚Ä¢ Procesadas con datos: ${finalStats.procesadasConDatos}`);

    // Verificar algunos ejemplos de piezas procesadas v√°lidas que quedan activas
    console.log('\n‚úÖ Muestra de piezas procesadas v√°lidas que se mantienen activas:');
    
    const validSamples = await db
      .select({
        refLocal: parts.refLocal,
        idVehiculo: parts.idVehiculo,
        vehicleMarca: parts.vehicleMarca,
        vehicleModelo: parts.vehicleModelo,
        precio: parts.precio
      })
      .from(parts)
      .where(
        and(
          eq(parts.activo, true),
          sql`${parts.idVehiculo} < 0`,
          sql`${parts.vehicleMarca} IS NOT NULL AND ${parts.vehicleMarca} != ''`
        )
      )
      .limit(5);

    validSamples.forEach((part, index) => {
      console.log(`   ${index + 1}. ${part.refLocal} - ${part.vehicleMarca} ${part.vehicleModelo} (Precio: ${part.precio})`);
    });

    const successRate = finalStats.procesadas > 0 ? 
      ((finalStats.procesadasConDatos / finalStats.procesadas) * 100).toFixed(2) : '0.00';

    console.log('\nüéØ Resumen final:');
    console.log(`   ‚Ä¢ Piezas desactivadas: ${deactivateResult.rowCount || 0}`);
    console.log(`   ‚Ä¢ Piezas procesadas conservadas: ${finalStats.procesadas}`);
    console.log(`   ‚Ä¢ Tasa de √©xito en datos de veh√≠culo: ${successRate}%`);
    console.log(`   ‚Ä¢ Sistema funcionando: ${finalStats.procesadas > 90000 ? '‚úÖ CORRECTAMENTE' : '‚ö†Ô∏è REVISAR'}`);

    return deactivateResult.rowCount || 0;

  } catch (error) {
    console.error('‚ùå Error en desactivaci√≥n inteligente:', error);
    throw error;
  }
}

// Ejecutar desactivaci√≥n
executeSmartDeactivation()
  .then(result => {
    console.log(`\n‚úÖ Desactivaci√≥n inteligente completada: ${result} piezas desactivadas`);
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error en desactivaci√≥n:', error);
    process.exit(1);
  });