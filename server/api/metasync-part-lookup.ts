
import { Router } from 'express';
import { metasyncApi } from './metasync';

const router = Router();

/**
 * Busca una pieza espec√≠fica en la API de Metasync por su refLocal
 * Hace b√∫squedas incrementales por rangos de fechas hasta encontrar la pieza
 */
router.post('/search', async (req, res) => {
  try {
    const { refLocal } = req.body;

    if (!refLocal) {
      return res.status(400).json({
        success: false,
        message: 'Se requiere refLocal'
      });
    }

    const refLocalNum = parseInt(refLocal);
    console.log(`üîç Buscando pieza refLocal=${refLocalNum} en API Metasync`);

    let foundPart = null;
    const now = new Date();
    
    // Estrategia: buscar solo en per√≠odos recientes (√∫ltimos 1-60 d√≠as)
    // La API de Metasync solo acepta fechas recientes
    const searchPeriods = [
      { days: 1, offset: 500 },
      { days: 7, offset: 500 },
      { days: 30, offset: 1000 },
      { days: 60, offset: 1000 }
    ];

    for (const period of searchPeriods) {
      if (foundPart) break;

      const fromDate = new Date(now);
      fromDate.setDate(fromDate.getDate() - period.days);
      
      console.log(`üìÖ Buscando en per√≠odo: √∫ltimos ${period.days} d√≠as (desde ${fromDate.toISOString().split('T')[0]})`);

      let lastId = 0;
      let attempts = 0;
      const maxAttempts = 10; // M√°ximo 10 p√°ginas por periodo

      while (attempts < maxAttempts && !foundPart) {
        try {
          console.log(`   üìÑ P√°gina ${attempts + 1}, lastId: ${lastId}, offset: ${period.offset}`);
          
          const response = await metasyncApi.getPartChanges(fromDate, lastId, period.offset);

          if (response && response.piezas && Array.isArray(response.piezas)) {
            console.log(`   ‚úÖ Recibidas ${response.piezas.length} piezas`);
            
            // Buscar la pieza espec√≠fica en la respuesta
            foundPart = response.piezas.find((p: any) => {
              const pRefLocal = p.refLocal || p.RefLocal;
              return pRefLocal === refLocalNum;
            });

            if (foundPart) {
              console.log(`   üéØ ¬°Pieza encontrada en los √∫ltimos ${period.days} d√≠as!`);
              break;
            }

            // Si no hay m√°s resultados, salir del loop
            if (response.piezas.length === 0) {
              console.log(`   ‚ÑπÔ∏è  No hay m√°s piezas en este per√≠odo`);
              break;
            }

            // Actualizar lastId para la siguiente p√°gina
            if (response.result_set && response.result_set.lastId) {
              lastId = response.result_set.lastId;
            } else {
              // Si no hay lastId, usar el √∫ltimo refLocal de las piezas
              const lastPiece = response.piezas[response.piezas.length - 1];
              lastId = lastPiece.refLocal || lastId;
            }
          } else {
            console.log(`   ‚ö†Ô∏è  Respuesta vac√≠a o sin piezas`);
            break;
          }

          attempts++;
        } catch (error) {
          console.error(`   ‚ùå Error en b√∫squeda:`, error instanceof Error ? error.message : 'Error desconocido');
          break;
        }
      }
    }

    if (foundPart) {
      console.log(`‚úÖ Pieza encontrada en API Metasync: refLocal=${refLocalNum}`);
      return res.json({
        success: true,
        part: foundPart,
        source: 'metasync_api'
      });
    } else {
      console.log(`‚ùå Pieza no encontrada en API Metasync: refLocal=${refLocalNum}`);
      return res.json({
        success: false,
        message: `No se encontr√≥ la pieza con referencia ${refLocalNum} en la API de Metasync (b√∫squeda limitada a los √∫ltimos 60 d√≠as de actualizaciones)`
      });
    }

  } catch (error) {
    console.error('‚ùå Error al buscar pieza en API Metasync:', error);
    return res.status(500).json({
      success: false,
      message: 'Error al consultar la API de Metasync',
      error: error instanceof Error ? error.message : 'Error desconocido'
    });
  }
});

export default router;
