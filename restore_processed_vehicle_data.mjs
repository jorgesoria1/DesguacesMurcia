import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

// Configurar conexi√≥n a la base de datos
const sql = neon(process.env.DATABASE_URL);

console.log('üîß Iniciando restauraci√≥n de datos de veh√≠culo para piezas procesadas...');

async function main() {
  try {
    // 1. Primero, obtener una muestra de piezas con datos incorrectos
    console.log('üìä Analizando piezas con categor√≠as incorrectas como marca...');
    
    const wrongParts = await sql`
      SELECT 
        ref_local,
        vehicle_marca,
        vehicle_modelo,
        descripcion_articulo,
        descripcion_familia
      FROM parts 
      WHERE id_vehiculo < 0 
        AND vehicle_marca IN ('ELECTRICIDAD', 'CARROCER√çA TRASERA', 'INTERIOR', 'SUSPENSI√ìN / FRENOS')
      LIMIT 10
    `;
    
    console.log('‚ùå Piezas con datos incorrectos:', wrongParts.length);
    if (wrongParts.length > 0) {
      console.log('Ejemplo:', wrongParts[0]);
    }
    
    // 2. Obtener una muestra de piezas con datos correctos para comparar
    console.log('\nüìä Analizando piezas con datos correctos...');
    
    const correctParts = await sql`
      SELECT 
        ref_local,
        id_vehiculo,
        vehicle_marca,
        vehicle_modelo,
        descripcion_articulo,
        fecha_creacion
      FROM parts 
      WHERE id_vehiculo < 0 
        AND vehicle_marca IS NOT NULL 
        AND vehicle_marca != ''
        AND vehicle_marca NOT IN ('ELECTRICIDAD', 'CARROCER√çA TRASERA', 'CARROCER√çA LATERALES', 'SUSPENSI√ìN / FRENOS', 'INTERIOR', 'DIRECCI√ìN / TRANSMISI√ìN', 'MOTOR')
      ORDER BY fecha_creacion ASC
      LIMIT 10
    `;
    
    console.log('‚úÖ Piezas con datos correctos:', correctParts.length);
    if (correctParts.length > 0) {
      console.log('Ejemplo:', correctParts[0]);
    }
    
    // 3. Estad√≠sticas generales
    console.log('\nüìà Estad√≠sticas de piezas procesadas:');
    
    const stats = await sql`
      SELECT 
        COUNT(*) as total_processed,
        COUNT(CASE WHEN vehicle_marca IS NOT NULL AND vehicle_marca != '' 
                     AND vehicle_marca NOT IN ('ELECTRICIDAD', 'CARROCER√çA TRASERA', 'CARROCER√çA LATERALES', 'SUSPENSI√ìN / FRENOS', 'INTERIOR', 'DIRECCI√ìN / TRANSMISI√ìN', 'MOTOR') 
                   THEN 1 END) as with_correct_data,
        COUNT(CASE WHEN vehicle_marca IN ('ELECTRICIDAD', 'CARROCER√çA TRASERA', 'CARROCER√çA LATERALES', 'SUSPENSI√ìN / FRENOS', 'INTERIOR', 'DIRECCI√ìN / TRANSMISI√ìN', 'MOTOR') 
                   THEN 1 END) as with_wrong_data
      FROM parts 
      WHERE id_vehiculo < 0
    `;
    
    console.log('Total piezas procesadas:', stats[0].total_processed);
    console.log('Con datos correctos:', stats[0].with_correct_data);
    console.log('Con datos incorrectos:', stats[0].with_wrong_data);
    
    // 4. Verificar si hay piezas que se pueden restaurar mediante lookup de veh√≠culos existentes
    console.log('\nüîç Verificando posibles restauraciones...');
    
    const possibleRestorations = await sql`
      SELECT 
        p.ref_local,
        p.id_vehiculo,
        p.vehicle_marca as current_marca,
        v.marca as vehicle_marca,
        v.modelo as vehicle_modelo,
        v.version as vehicle_version,
        v.anyo as vehicle_anyo
      FROM parts p
      LEFT JOIN vehicles v ON v.id_local = p.id_vehiculo
      WHERE p.id_vehiculo < 0 
        AND p.vehicle_marca IN ('ELECTRICIDAD', 'CARROCER√çA TRASERA', 'INTERIOR')
        AND v.id IS NOT NULL
      LIMIT 10
    `;
    
    console.log('Piezas que podr√≠an restaurarse desde veh√≠culos existentes:', possibleRestorations.length);
    if (possibleRestorations.length > 0) {
      console.log('Ejemplo de restauraci√≥n posible:', possibleRestorations[0]);
    }
    
    console.log('\n‚úÖ An√°lisis completado. Use la informaci√≥n para implementar la correcci√≥n en el servicio de importaci√≥n.');
    
  } catch (error) {
    console.error('‚ùå Error durante el an√°lisis:', error);
  }
}

main().catch(console.error);