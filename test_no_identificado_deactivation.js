/**
 * SCRIPT DE VERIFICACI√ìN: Desactivaci√≥n de piezas "no identificado"
 * Verifica que las piezas con t√≠tulo "no identificado" se desactiven durante importaci√≥n
 */

import { db } from './server/db.ts';
import { parts } from './shared/schema.ts';
import { eq, sql, and, like } from 'drizzle-orm';

console.log('üîç VERIFICANDO IMPLEMENTACI√ìN DE DESACTIVACI√ìN "NO IDENTIFICADO"');
console.log('‚ïê'.repeat(70));

async function verificarDesactivacionNoIdentificado() {
  try {
    console.log('\nüìä AN√ÅLISIS ACTUAL DE PIEZAS CON "NO IDENTIFICADO":');
    
    // Buscar piezas con "no identificado" en el t√≠tulo
    const piezasNoIdentificado = await db.select({
      id: parts.id,
      refLocal: parts.refLocal,
      descripcionArticulo: parts.descripcionArticulo,
      activo: parts.activo,
      idVehiculo: parts.idVehiculo,
      precio: parts.precio
    })
    .from(parts)
    .where(
      and(
        sql`LOWER(${parts.descripcionArticulo}) LIKE '%no identificado%'`,
        eq(parts.activo, true) // Solo buscar las que A√öN est√°n activas
      )
    )
    .limit(20);
    
    console.log(`\nüìä RESULTADOS:`);
    console.log(`   ‚Ä¢ Piezas activas con "no identificado": ${piezasNoIdentificado.length}`);
    
    if (piezasNoIdentificado.length > 0) {
      console.log('\n‚ùå PIEZAS QUE DEBER√çAN ESTAR DESACTIVADAS:');
      piezasNoIdentificado.forEach((pieza, index) => {
        console.log(`   ${index + 1}. ID: ${pieza.id}, Ref: ${pieza.refLocal}, Veh√≠culo: ${pieza.idVehiculo}`);
        console.log(`      T√≠tulo: "${pieza.descripcionArticulo}"`);
        console.log(`      Estado: ${pieza.activo ? 'ACTIVA ‚ùå' : 'INACTIVA ‚úÖ'}, Precio: ${pieza.precio}`);
      });
      
      console.log('\n‚ö†Ô∏è PROBLEMA DETECTADO:');
      console.log('   Hay piezas con "no identificado" que siguen activas.');
      console.log('   Estas deber√≠an desactivarse autom√°ticamente durante la importaci√≥n.');
    } else {
      console.log('\n‚úÖ IMPLEMENTACI√ìN CORRECTA:');
      console.log('   No se encontraron piezas activas con "no identificado".');
      console.log('   La l√≥gica de desactivaci√≥n est√° funcionando correctamente.');
    }
    
    // Verificar tambi√©n las desactivadas para confirmar que la l√≥gica funciona
    const piezasDesactivadas = await db.select({
      count: sql<number>`count(*)`
    })
    .from(parts)
    .where(
      and(
        sql`LOWER(${parts.descripcionArticulo}) LIKE '%no identificado%'`,
        eq(parts.activo, false)
      )
    );
    
    console.log(`\nüìä PIEZAS DESACTIVADAS CON "NO IDENTIFICADO": ${piezasDesactivadas[0]?.count || 0}`);
    
    console.log('\nüîç C√ìDIGO IMPLEMENTADO EN normalizePart:');
    console.log('```javascript');
    console.log('// ‚úÖ VERIFICAR T√çTULO "NO IDENTIFICADO" - DESACTIVAR ESTAS PIEZAS');
    console.log('const tituloLower = descripcionArticulo.toLowerCase();');
    console.log('if (tituloLower.includes("no identificado") || tituloLower.includes("no identificada")) {');
    console.log('  console.log(`‚ùå Pieza ${partData.refLocal}: DESACTIVADA por t√≠tulo "no identificado"`);');
    console.log('  return false;');
    console.log('}');
    console.log('```');
    
    console.log('\n‚úÖ SIGUIENTE PASO:');
    console.log('   Ejecutar una importaci√≥n para probar la l√≥gica en acci√≥n.');
    console.log('   Las piezas con "no identificado" deber√≠an desactivarse autom√°ticamente.');
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  }
}

// Ejecutar verificaci√≥n
verificarDesactivacionNoIdentificado()
  .then(() => {
    console.log('\n‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en verificaci√≥n:', error);
    process.exit(1);
  });